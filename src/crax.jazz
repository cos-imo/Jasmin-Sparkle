/*
A simple CRAX implementation in Jasmin
*/

require "alzette.jazz"


fn crax (reg u32 xword, reg u32 yword, reg u32 key_0, reg u32 key_1, reg u32 key_2, reg u32 key_3) -> reg u64 {

  inline int step;
  inline u32 round_constant;

  reg u64 export_var;
  reg u64 padded_y;

  for step = 0 to 10 {
    xword ^= step;
    if((step%2) == 0){
      xword ^= key_0;
      yword ^= key_1;
    } else {
      xword ^= key_2;
      yword ^= key_3;
    }
    round_constant = get_round_constant(step%5);
    xword, yword = alzette(round_constant, xword, yword);
  }

  xword ^= key_0;
  yword ^= key_1;

  xword = xword;
  yword = yword;

  export_var = (64u) xword;
  export_var>>r=32;
  padded_y = (64u) yword;
  export_var += padded_y;

  return export_var;
}
