/*
A simple schwaemm implementation in Jasmin
*/

require "appendix.jazz"

fn schwaemm(reg u128 K, reg u256 N, reg u64 A_start, reg u64 A_end, reg u64 M_start, reg u64 M_end, reg u64 output_ptr) -> reg u128 { 

  stack u256 SL;
  stack u128 SR;
  inline u32[8] SL_tab;
  inline u32[4] SR_tab;

  reg u64 A_lenght;
  reg u64 M_lenght;

  A_lenght = A_end;
  A_lenght -= A_start;
  M_lenght = M_end;
  M_lenght -= M_start;

  stack u64 A_lenght_save;
  stack u64 M_lenght_save;
  M_lenght_save = M_lenght;

  reg u128 constA;
  reg u128 constM;

  stack u128 constA_save;
  stack u128 constM_save;

  stack u32[8] x;
  stack u32[4] y;

  M_lenght = M_lenght_save;

  constA, constM = initialize_padding_constants(A_lenght, M_lenght);

  constA_save = constA;
  constM_save = constM;

  M_lenght_save = M_lenght;

  if A_lenght != 0 {
    while ((A_lenght) < 256) {
      inline u256 feedback_1_result;
      inline u256 W_result;

      inline u256 A_block;
      inline u32[8] A_block_tab;
      A_block = (256u)[A_start];

      stack u64 A_start_save;
      A_start_save = A_start;

      feedback_1_result = feedback_function_1(SL, A_block);
      W_result = W_128_256(SR);

      feedback_1_result ^= W_result;

      SL_tab = stack_u256_to_tab(SL);
      A_block_tab = stack_u256_to_tab(A_block);

      x,y = pre_sparkle_padding(feedback_1_result, SR);

      SL_tab, SR_tab = sparkle384(x,y,7);

      A_start = A_start_save;

      A_start += 32;

      A_lenght -= 32;
    }

    inline u256 feedback_1_result;
    inline u256 W_result;
    reg u256 zero;
    
    zero = #set0_256();
    stack u8[32] t;
    t.[u256 0] = zero;

    reg u256 A_block;
    reg u64 i;
    i=0;

    while (i<A_lenght) {
      t[i] = (u8)[A_start + i];
      i += 1;
    }
    t[i] = 1;

    A_block = t.[u256 0];

    constA = constA_save;

    SR ^= constA;

    constA_save = constA;

    feedback_1_result = feedback_function_1(SL, A_block);
    W_result = W_128_256(SR);
    feedback_1_result ^= W_result;

    x,y = pre_sparkle_padding(feedback_1_result, SR);

    SL_tab, SR_tab = sparkle384(x,y,11);

  }

  A_lenght_save = A_lenght;

  M_lenght = M_lenght_save;

  if M_lenght != 0 {
    while ((M_lenght) < 256) {

      M_lenght_save = M_lenght;

      inline u256 feedback_1_result;
      inline u256 W_result;

      inline u256 M_block;
      M_block = (256u)[M_start];

      feedback_1_result = feedback_function_1(SL, M_block);
      W_result = W_128_256(SR);

      feedback_1_result ^= W_result;

      x,y = pre_sparkle_padding(feedback_1_result, SR);

      SL_tab, SR_tab = sparkle384(x,y,7);

      M_start += 32;

      M_lenght = M_lenght_save; 

      M_lenght -= 32;

      M_lenght_save = M_lenght;
    }

    inline u256 feedback_1_result;
    inline u256 W_result;
    reg u256 zero;
    
    zero = #set0_256();
    stack u8[32] t;
    t.[u256 0] = zero;

    reg u256 M_block;
    reg u64 i;
    i=0;

    while (i<M_lenght) {
      t[i] = (u8)[M_start + i];
      i += 1;
    }
    t[i] = 1;

    M_block = t.[u256 0];

    constM = constM_save;

    SR ^= constM;

    constM_save = constM;

    feedback_1_result = feedback_function_2(SL, M_block);
    W_result = W_128_256(SR);
    feedback_1_result ^= W_result;

    x,y = pre_sparkle_padding(feedback_1_result, SR);

    SL_tab, SR_tab = sparkle384(x, y,11);
  }
  
  return constM;
}
