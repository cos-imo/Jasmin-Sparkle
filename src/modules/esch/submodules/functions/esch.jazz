/*
A simple schwaemm implementation in Jasmin
*/

from functions require "sparkle384.jazz"

export
fn schwaemm(reg u64 M_start, reg u64 M_end, reg u64 output_ptr) -> reg u128 { 

  reg int l;
  reg u64 constM;
  reg u128 S_0;
  reg u256 S_1;
  reg u128 D_0;
  reg u128 D_1;

  if M_end - M_start != 0 {
    while ((M_end-M_start) < 256) {
      stack u256 M_block;
      stack u32[8] M_block_tab;
      M_block = (128u)[M_start];

      S_0 ^= M_block;

      //Pad M_block
      // M_3 Mult

      //ou 

      // M_8_128_mult?




      // Pad M_block

      S ^= M_block;

      S = Sparkle384_7(S);
    }

    if M_end-M_start<128 {
      // pad 
      constM = 1;
      constM <<= 192;
    } else {
      constM = 2;
      constM <<= 192;
    }

    reg u256 zero;
    reg u256 M_block;
    
    zero = #set0_256();
    stack u8[32] t;
    t.[u256 0] = zero;

    reg u64 i;
    i=0;

    while (i<M_end-M_start) {
      t[i] = (u8)[M_start + i];
      i += 1;
    }
    t[i] = 1;

    M_block = t.[u256 0];

    // Padd last M M_block
    
    S ^= M_block;

    S ^= constM;

    S = sparkle384_11(S);

    D_0 = (128u)S;

    S = Sparkle384_7(S);

    D_1 = (128u)S;

  } else {
    l = 1;
  }

  return constM;
}
