/*
A simple Alzette implementation in Jasmin
*/

inline 
fn get_offset(inline u32 index) -> inline int, inline int {
  inline int offset_x;
  inline int offset_y;

  if (index==0) {
    offset_x = 31;
    offset_y = 24;
  }

  if (index==1) {
    offset_x = 17;
    offset_y = 17;
  }

  if (index==2) {
    offset_x = 0;
    offset_y = 31;
  }

  if (index==3) {
    offset_x = 24;
    offset_y = 16;
  }

  return offset_x, offset_y;
}


export
fn alzette(reg u32 c, reg u32 x, reg u32 y) -> reg u64 {

  inline int i;

  reg u32 temp;
  reg u64 export_var;
  reg u64 padded_y;

  for i=0 to 4 {
    
    inline int offset_x;
    inline int offset_y;

    offset_x, offset_y = get_offset(i);

    temp = y;
    temp>>r = offset_x;
    x += temp;

    temp=temp;
    temp ^= temp;

    temp = x;
    temp>>r = offset_y;
    y ^= temp;

    x^=c;

  }

  x=x;
  y=y;

  export_var = (64u) x;
  export_var>>r=32;
  padded_y = (64u) y;
  export_var += padded_y;

  return export_var;
}
