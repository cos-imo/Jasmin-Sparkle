
require "branch_permutation.jazz"

inline
fn L6(reg u64 x, reg u64 y)  -> reg u64, reg u64 {

  inline u64 tx, ty;
  inline u64 shift_tx, shift_ty;

  /*
    Feistel round
  */

  tx = [x];
  tx ^= [x + 4];
  tx ^= [x + 8];
  ty = [y];
  ty ^= [y + 4];
  ty ^= [y + 8];

  shift_tx = tx;
  shift_tx <<= 16;
  tx ^= shift_tx;
  tx <<r= 16;

  shift_ty = ty;
  shift_ty <<= 16;
  ty ^= shift_ty;
  ty <<r= 16;

  [y + 12] ^= [y];
  [y + 12] ^= tx;
  [y + 16] ^= [y + 4];
  [y + 16] ^= tx;
  [y + 20] ^= [y + 8];
  [y + 20] ^= tx;

  [x + 12] ^= [x];
  [x + 12] ^= ty;
  [x + 16] ^= [x + 4];
  [x + 16] ^= ty;
  [x + 20] ^= [x + 8];
  [x + 20] ^= ty;

  /*
    Branch permutation
  */

  x = branch_permutation(x);
  y = branch_permutation(y);

  return x,y;
}
